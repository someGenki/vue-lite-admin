# 参考 https://docs.github.com/cn/get-started
# 建立一个名为 CI 的工作流(非必要属性，默认值为文件名)  “在什么事件触发，在哪个环境下，要做哪些任务”
name: ci
# 监听Github仓库 main 分支上的push事件
on:
  push:
    branches: [ main ]
# 定义要做哪些任务 ★
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest    # 指定虚拟机版本
    steps: # ★ 指定该任务有哪些步骤
      - uses: actions/checkout@v2         # 1. 获取项目源码

      - uses: actions/setup-node@v2.5.1   # 2. 设置 node.js 环境
        with:
          node-version: 16.x

      #  yarn缓存 https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install && npx vite build --base=/admin/    # 3. 安装依赖并打包构建

      - name: Deploy to Server (ALI SAS) 🚀        # 4. 部署到阿里轻量级服务器上
        uses: easingthemes/ssh-deploy@v2.2.11     # https://github.com/easingthemes/ssh-deploy
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          REMOTE_USER: root
          REMOTE_HOST: 47.100.95.40
          SOURCE: ./dist/
          TARGET: /www/html/admin/

      - run:  npx vite build --base=/vue-lite-admin/  # 5. 重新构建一份打包文件 指定base为 <project name>

      - name: Deploy to Github page 🚀                 # 6. 部署到github pages上
        uses: JamesIves/github-pages-deploy-action@v4.2.3
        with:
          branch: gh-pages
          folder: dist
          single-commit: true

